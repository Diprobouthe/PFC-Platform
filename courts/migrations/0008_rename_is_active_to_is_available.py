# Generated by Django 5.2 on 2025-06-18 16:30

from django.db import migrations, models


def convert_active_to_available(apps, schema_editor):
    """
    Convert is_active to is_available with inverted logic.
    Old logic: is_active=True meant occupied, is_active=False meant available
    New logic: is_available=True means available, is_available=False means occupied
    """
    Court = apps.get_model('courts', 'Court')
    for court in Court.objects.all():
        # Invert the logic: if was active (occupied), now not available
        # if was inactive (available), now available
        court.is_available = not court.is_active
        court.save()


def convert_available_to_active(apps, schema_editor):
    """
    Reverse migration: convert is_available back to is_active
    """
    Court = apps.get_model('courts', 'Court')
    for court in Court.objects.all():
        # Reverse the logic
        court.is_active = not court.is_available
        court.save()


class Migration(migrations.Migration):

    dependencies = [
        ('courts', '0007_remove_court_court_complex_courtcomplex_courts'),
    ]

    operations = [
        # First, add the new field with default value
        migrations.AddField(
            model_name='court',
            name='is_available',
            field=models.BooleanField(default=True, help_text='If True, court is available for use. If False, court is occupied by a match'),
        ),
        # Convert data from is_active to is_available with inverted logic
        migrations.RunPython(convert_active_to_available, convert_available_to_active),
        # Remove the old field
        migrations.RemoveField(
            model_name='court',
            name='is_active',
        ),
    ]

